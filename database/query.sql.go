// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const cleanUpStuck = `-- name: CleanUpStuck :exec
UPDATE _jobs
SET status = 'pending'
WHERE status = 'pending'
  AND queue = ANY ($1::varchar[])
  AND run_at <= now() - INTERVAL '' || $2 || ' minutes'
`

type CleanUpStuckParams struct {
	Column1 []string
	Column2 sql.NullString
}

func (q *Queries) CleanUpStuck(ctx context.Context, arg CleanUpStuckParams) error {
	_, err := q.db.Exec(ctx, cleanUpStuck, arg.Column1, arg.Column2)
	return err
}

const enqueue = `-- name: Enqueue :exec
INSERT INTO _jobs (queue, job_type, priority, run_at, payload, metadata)
VALUES ($1, $2, $3, $4, $5, $6)
returning id
`

type EnqueueParams struct {
	Queue    string
	JobType  string
	Priority int16
	RunAt    time.Time
	Payload  []byte
	Metadata []byte
}

func (q *Queries) Enqueue(ctx context.Context, arg EnqueueParams) error {
	_, err := q.db.Exec(ctx, enqueue,
		arg.Queue,
		arg.JobType,
		arg.Priority,
		arg.RunAt,
		arg.Payload,
		arg.Metadata,
	)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, priority, run_at, job_type, payload, metadata, error_count, last_error, queue, status, created_at, updated_at
FROM _jobs
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, id int64) (Job, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.RunAt,
		&i.JobType,
		&i.Payload,
		&i.Metadata,
		&i.ErrorCount,
		&i.LastError,
		&i.Queue,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByStatusAndQueueName = `-- name: GetTasksByStatusAndQueueName :many
SELECT id, priority, run_at, job_type, payload, metadata, error_count, last_error, queue, status, created_at, updated_at
FROM _jobs
WHERE queue = $1
  AND status = ANY ($2::varchar[]::job_status[])
LIMIT $3 OFFSET $4
`

type GetTasksByStatusAndQueueNameParams struct {
	Queue   string
	Column2 []string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetTasksByStatusAndQueueName(ctx context.Context, arg GetTasksByStatusAndQueueNameParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, getTasksByStatusAndQueueName,
		arg.Queue,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Priority,
			&i.RunAt,
			&i.JobType,
			&i.Payload,
			&i.Metadata,
			&i.ErrorCount,
			&i.LastError,
			&i.Queue,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalInfo = `-- name: GetTotalInfo :many
SELECT queue, status, count(*) as cnt
FROM _jobs
GROUP BY queue, status
`

type GetTotalInfoRow struct {
	Queue  string
	Status JobStatus
	Cnt    int64
}

func (q *Queries) GetTotalInfo(ctx context.Context) ([]GetTotalInfoRow, error) {
	rows, err := q.db.Query(ctx, getTotalInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalInfoRow
	for rows.Next() {
		var i GetTotalInfoRow
		if err := rows.Scan(&i.Queue, &i.Status, &i.Cnt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalInfoByName = `-- name: GetTotalInfoByName :many
SELECT queue, status, count(*) as cnt, sum(error_count) as err_count
FROM _jobs
WHERE queue = $1
GROUP BY queue, status
`

type GetTotalInfoByNameRow struct {
	Queue    string
	Status   JobStatus
	Cnt      int64
	ErrCount int64
}

func (q *Queries) GetTotalInfoByName(ctx context.Context, queue string) ([]GetTotalInfoByNameRow, error) {
	rows, err := q.db.Query(ctx, getTotalInfoByName, queue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalInfoByNameRow
	for rows.Next() {
		var i GetTotalInfoByNameRow
		if err := rows.Scan(
			&i.Queue,
			&i.Status,
			&i.Cnt,
			&i.ErrCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalInfoByNameHistory = `-- name: GetTotalInfoByNameHistory :many
SELECT queue, date(created_at), status, count(*) as cnt, sum(error_count) as err_count
FROM _jobs
WHERE queue = $1
  AND created_at > NOW() - INTERVAL '10 days'
GROUP BY queue, status, date(created_at)
ORDER BY date(created_at)
`

type GetTotalInfoByNameHistoryRow struct {
	Queue    string
	Date     time.Time
	Status   JobStatus
	Cnt      int64
	ErrCount int64
}

func (q *Queries) GetTotalInfoByNameHistory(ctx context.Context, queue string) ([]GetTotalInfoByNameHistoryRow, error) {
	rows, err := q.db.Query(ctx, getTotalInfoByNameHistory, queue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalInfoByNameHistoryRow
	for rows.Next() {
		var i GetTotalInfoByNameHistoryRow
		if err := rows.Scan(
			&i.Queue,
			&i.Date,
			&i.Status,
			&i.Cnt,
			&i.ErrCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalInfoHistory = `-- name: GetTotalInfoHistory :many
SELECT queue, date(created_at), status, count(*) as cnt, sum(error_count) as err_count
FROM _jobs
WHERE created_at > NOW() - INTERVAL '90 days'
GROUP BY queue, status, date(created_at)
ORDER BY date(created_at)
`

type GetTotalInfoHistoryRow struct {
	Queue    string
	Date     time.Time
	Status   JobStatus
	Cnt      int64
	ErrCount int64
}

func (q *Queries) GetTotalInfoHistory(ctx context.Context) ([]GetTotalInfoHistoryRow, error) {
	rows, err := q.db.Query(ctx, getTotalInfoHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalInfoHistoryRow
	for rows.Next() {
		var i GetTotalInfoHistoryRow
		if err := rows.Scan(
			&i.Queue,
			&i.Date,
			&i.Status,
			&i.Cnt,
			&i.ErrCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalInfoWithErrors = `-- name: GetTotalInfoWithErrors :many
SELECT queue, count(*) as cnt
FROM _jobs
WHERE error_count > 0
  AND status = 'pending'
GROUP BY queue
`

type GetTotalInfoWithErrorsRow struct {
	Queue string
	Cnt   int64
}

func (q *Queries) GetTotalInfoWithErrors(ctx context.Context) ([]GetTotalInfoWithErrorsRow, error) {
	rows, err := q.db.Query(ctx, getTotalInfoWithErrors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalInfoWithErrorsRow
	for rows.Next() {
		var i GetTotalInfoWithErrorsRow
		if err := rows.Scan(&i.Queue, &i.Cnt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const jobToProcessing = `-- name: JobToProcessing :exec
UPDATE _jobs
SET status     = 'processing',
    updated_at = now(),
    run_at     = now()
WHERE id = ANY ($1::bigserial[])
`

func (q *Queries) JobToProcessing(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, jobToProcessing, dollar_1)
	return err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE _jobs
SET status = $2
WHERE id = $1
`

type UpdateStatusParams struct {
	ID     int64
	Status JobStatus
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus, arg.ID, arg.Status)
	return err
}

const updateStatusError = `-- name: UpdateStatusError :exec
UPDATE _jobs
SET error_count = $1,
    run_at      = $2,
    last_error  = $3,
    updated_at  = now(),
    status      = 'pending'
WHERE id = $4
`

type UpdateStatusErrorParams struct {
	ErrorCount int32
	RunAt      time.Time
	LastError  sql.NullString
	ID         int64
}

func (q *Queries) UpdateStatusError(ctx context.Context, arg UpdateStatusErrorParams) error {
	_, err := q.db.Exec(ctx, updateStatusError,
		arg.ErrorCount,
		arg.RunAt,
		arg.LastError,
		arg.ID,
	)
	return err
}
